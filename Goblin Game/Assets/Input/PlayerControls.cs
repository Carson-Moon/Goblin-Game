//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""GoblinControls"",
            ""id"": ""73c72349-28a1-48e7-93ca-0d977487d969"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""88b9828a-25b6-481e-8f74-f3c416b0033a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""49b2b79c-fd12-4f37-87fe-76fe637667b4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9d275155-bfe9-4427-b110-c5acb784c338"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""c88f9994-1d1f-4571-acdb-90ba4a3da15b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""2bc4de56-26c6-4f2c-869c-892625dc9b6f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stab"",
                    ""type"": ""Button"",
                    ""id"": ""e0ab2392-df94-41b9-892a-9ec8e18e8d26"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""f25f944e-3e33-4f56-a0f4-3c6320407ddd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""870b7de0-a3fc-4262-8919-65a3fc6142b9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Debug"",
                    ""type"": ""Button"",
                    ""id"": ""87db9cd6-272a-4991-b1fa-9a31580f3c56"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Vacuum"",
                    ""type"": ""Button"",
                    ""id"": ""821426de-6e1b-423e-94aa-a17f72baea99"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""b1eae91d-d9bd-4e8d-9299-f71ee1d5d114"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""2fa2127d-f5d2-4453-afbb-13db10aa0d08"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""39a6bd2c-bd86-40d9-aa94-490827f4f0f3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c2bf7cb9-178a-47f8-9ef4-edcf406dc6a8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04bb76b8-8637-46e2-b38e-e9c585da3c0b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fb97fe79-f3be-4582-8206-f8064bca0dde"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""39c0cf5f-a6f8-4a5d-9e00-296ff6124c58"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a26cf499-282f-43d9-b9a1-6463ca93fe91"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d80d31da-f740-4c14-bac7-bf0001688c7c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32d62ea0-44b4-408c-a1b6-c2ffc532c0bc"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13a582f1-ce72-4d1b-b60d-4881b70631e2"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61b2d091-0f83-4f47-90eb-9af19bfe6f13"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fed02f4c-ebc8-45fd-8ee1-7ee7ae6af93a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""315c9ac9-0850-45e7-a8a0-e318235ac7c8"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6f616c0-2a08-48b7-a5c6-75d4091d2d3c"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Debug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c473d1b-0f90-48ff-a77f-1c6d5f79556e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vacuum"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""477660e5-48da-4884-98ad-d673df23e7a4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f724f0dc-0739-4b5c-b674-bdc45836d94e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI_Interaction"",
            ""id"": ""a9332d33-79ae-43e1-ba8f-155ca503d8a8"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8c5ef954-af07-4c44-b8a4-3ec2444c97ad"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8bc045a9-1f41-42c8-a258-08e06c908234"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""452499ab-2617-42d0-a78a-8c0dd16bfcf6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d664a170-1e28-4c1f-bee9-7bb15d8e0b2d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GoblinMovement"",
            ""id"": ""3fe22c95-6939-4468-83d8-5870c6f51fb2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7938eb7b-12a0-4d07-b9cd-87bb64e66981"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""db4972bf-93ba-43ed-8fc8-0a3219d87728"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""969bc7f1-3b3a-48d4-aba4-75ed58b3018c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1ff14afe-8274-44d0-875e-5ddb472df27d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""115fcdc4-2e9e-410a-9055-15b577f01f23"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a0f3a09-97af-4bb5-b4e3-1deb9c56c28b"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0a3ef21e-c876-49d1-b66f-9f70a3d6359e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fea85e33-e0cf-4788-92f1-aa8d5390f10e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dfd4463d-178c-4a1e-8bd8-f3e41504f7d0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5f79af34-1919-412c-8597-40208e100138"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""91953257-aa03-4c74-8548-94e20777fbc0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d1a56b2a-c30d-423c-ae5c-a385ba6be7ba"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GoblinControls
        m_GoblinControls = asset.FindActionMap("GoblinControls", throwIfNotFound: true);
        m_GoblinControls_Move = m_GoblinControls.FindAction("Move", throwIfNotFound: true);
        m_GoblinControls_Jump = m_GoblinControls.FindAction("Jump", throwIfNotFound: true);
        m_GoblinControls_Look = m_GoblinControls.FindAction("Look", throwIfNotFound: true);
        m_GoblinControls_Sprint = m_GoblinControls.FindAction("Sprint", throwIfNotFound: true);
        m_GoblinControls_Crouch = m_GoblinControls.FindAction("Crouch", throwIfNotFound: true);
        m_GoblinControls_Stab = m_GoblinControls.FindAction("Stab", throwIfNotFound: true);
        m_GoblinControls_Pickup = m_GoblinControls.FindAction("Pickup", throwIfNotFound: true);
        m_GoblinControls_Throw = m_GoblinControls.FindAction("Throw", throwIfNotFound: true);
        m_GoblinControls_Debug = m_GoblinControls.FindAction("Debug", throwIfNotFound: true);
        m_GoblinControls_Vacuum = m_GoblinControls.FindAction("Vacuum", throwIfNotFound: true);
        m_GoblinControls_LeftClick = m_GoblinControls.FindAction("LeftClick", throwIfNotFound: true);
        m_GoblinControls_RightClick = m_GoblinControls.FindAction("RightClick", throwIfNotFound: true);
        // UI_Interaction
        m_UI_Interaction = asset.FindActionMap("UI_Interaction", throwIfNotFound: true);
        m_UI_Interaction_MousePosition = m_UI_Interaction.FindAction("MousePosition", throwIfNotFound: true);
        m_UI_Interaction_MouseDelta = m_UI_Interaction.FindAction("MouseDelta", throwIfNotFound: true);
        // GoblinMovement
        m_GoblinMovement = asset.FindActionMap("GoblinMovement", throwIfNotFound: true);
        m_GoblinMovement_Movement = m_GoblinMovement.FindAction("Movement", throwIfNotFound: true);
        m_GoblinMovement_Jump = m_GoblinMovement.FindAction("Jump", throwIfNotFound: true);
        m_GoblinMovement_Crouch = m_GoblinMovement.FindAction("Crouch", throwIfNotFound: true);
        m_GoblinMovement_Look = m_GoblinMovement.FindAction("Look", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_GoblinControls.enabled, "This will cause a leak and performance issues, PlayerControls.GoblinControls.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI_Interaction.enabled, "This will cause a leak and performance issues, PlayerControls.UI_Interaction.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_GoblinMovement.enabled, "This will cause a leak and performance issues, PlayerControls.GoblinMovement.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GoblinControls
    private readonly InputActionMap m_GoblinControls;
    private List<IGoblinControlsActions> m_GoblinControlsActionsCallbackInterfaces = new List<IGoblinControlsActions>();
    private readonly InputAction m_GoblinControls_Move;
    private readonly InputAction m_GoblinControls_Jump;
    private readonly InputAction m_GoblinControls_Look;
    private readonly InputAction m_GoblinControls_Sprint;
    private readonly InputAction m_GoblinControls_Crouch;
    private readonly InputAction m_GoblinControls_Stab;
    private readonly InputAction m_GoblinControls_Pickup;
    private readonly InputAction m_GoblinControls_Throw;
    private readonly InputAction m_GoblinControls_Debug;
    private readonly InputAction m_GoblinControls_Vacuum;
    private readonly InputAction m_GoblinControls_LeftClick;
    private readonly InputAction m_GoblinControls_RightClick;
    public struct GoblinControlsActions
    {
        private @PlayerControls m_Wrapper;
        public GoblinControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GoblinControls_Move;
        public InputAction @Jump => m_Wrapper.m_GoblinControls_Jump;
        public InputAction @Look => m_Wrapper.m_GoblinControls_Look;
        public InputAction @Sprint => m_Wrapper.m_GoblinControls_Sprint;
        public InputAction @Crouch => m_Wrapper.m_GoblinControls_Crouch;
        public InputAction @Stab => m_Wrapper.m_GoblinControls_Stab;
        public InputAction @Pickup => m_Wrapper.m_GoblinControls_Pickup;
        public InputAction @Throw => m_Wrapper.m_GoblinControls_Throw;
        public InputAction @Debug => m_Wrapper.m_GoblinControls_Debug;
        public InputAction @Vacuum => m_Wrapper.m_GoblinControls_Vacuum;
        public InputAction @LeftClick => m_Wrapper.m_GoblinControls_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_GoblinControls_RightClick;
        public InputActionMap Get() { return m_Wrapper.m_GoblinControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GoblinControlsActions set) { return set.Get(); }
        public void AddCallbacks(IGoblinControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_GoblinControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GoblinControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Stab.started += instance.OnStab;
            @Stab.performed += instance.OnStab;
            @Stab.canceled += instance.OnStab;
            @Pickup.started += instance.OnPickup;
            @Pickup.performed += instance.OnPickup;
            @Pickup.canceled += instance.OnPickup;
            @Throw.started += instance.OnThrow;
            @Throw.performed += instance.OnThrow;
            @Throw.canceled += instance.OnThrow;
            @Debug.started += instance.OnDebug;
            @Debug.performed += instance.OnDebug;
            @Debug.canceled += instance.OnDebug;
            @Vacuum.started += instance.OnVacuum;
            @Vacuum.performed += instance.OnVacuum;
            @Vacuum.canceled += instance.OnVacuum;
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
        }

        private void UnregisterCallbacks(IGoblinControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Stab.started -= instance.OnStab;
            @Stab.performed -= instance.OnStab;
            @Stab.canceled -= instance.OnStab;
            @Pickup.started -= instance.OnPickup;
            @Pickup.performed -= instance.OnPickup;
            @Pickup.canceled -= instance.OnPickup;
            @Throw.started -= instance.OnThrow;
            @Throw.performed -= instance.OnThrow;
            @Throw.canceled -= instance.OnThrow;
            @Debug.started -= instance.OnDebug;
            @Debug.performed -= instance.OnDebug;
            @Debug.canceled -= instance.OnDebug;
            @Vacuum.started -= instance.OnVacuum;
            @Vacuum.performed -= instance.OnVacuum;
            @Vacuum.canceled -= instance.OnVacuum;
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
        }

        public void RemoveCallbacks(IGoblinControlsActions instance)
        {
            if (m_Wrapper.m_GoblinControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGoblinControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_GoblinControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GoblinControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GoblinControlsActions @GoblinControls => new GoblinControlsActions(this);

    // UI_Interaction
    private readonly InputActionMap m_UI_Interaction;
    private List<IUI_InteractionActions> m_UI_InteractionActionsCallbackInterfaces = new List<IUI_InteractionActions>();
    private readonly InputAction m_UI_Interaction_MousePosition;
    private readonly InputAction m_UI_Interaction_MouseDelta;
    public struct UI_InteractionActions
    {
        private @PlayerControls m_Wrapper;
        public UI_InteractionActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_UI_Interaction_MousePosition;
        public InputAction @MouseDelta => m_Wrapper.m_UI_Interaction_MouseDelta;
        public InputActionMap Get() { return m_Wrapper.m_UI_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UI_InteractionActions set) { return set.Get(); }
        public void AddCallbacks(IUI_InteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_UI_InteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UI_InteractionActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @MouseDelta.started += instance.OnMouseDelta;
            @MouseDelta.performed += instance.OnMouseDelta;
            @MouseDelta.canceled += instance.OnMouseDelta;
        }

        private void UnregisterCallbacks(IUI_InteractionActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @MouseDelta.started -= instance.OnMouseDelta;
            @MouseDelta.performed -= instance.OnMouseDelta;
            @MouseDelta.canceled -= instance.OnMouseDelta;
        }

        public void RemoveCallbacks(IUI_InteractionActions instance)
        {
            if (m_Wrapper.m_UI_InteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUI_InteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_UI_InteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UI_InteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UI_InteractionActions @UI_Interaction => new UI_InteractionActions(this);

    // GoblinMovement
    private readonly InputActionMap m_GoblinMovement;
    private List<IGoblinMovementActions> m_GoblinMovementActionsCallbackInterfaces = new List<IGoblinMovementActions>();
    private readonly InputAction m_GoblinMovement_Movement;
    private readonly InputAction m_GoblinMovement_Jump;
    private readonly InputAction m_GoblinMovement_Crouch;
    private readonly InputAction m_GoblinMovement_Look;
    public struct GoblinMovementActions
    {
        private @PlayerControls m_Wrapper;
        public GoblinMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GoblinMovement_Movement;
        public InputAction @Jump => m_Wrapper.m_GoblinMovement_Jump;
        public InputAction @Crouch => m_Wrapper.m_GoblinMovement_Crouch;
        public InputAction @Look => m_Wrapper.m_GoblinMovement_Look;
        public InputActionMap Get() { return m_Wrapper.m_GoblinMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GoblinMovementActions set) { return set.Get(); }
        public void AddCallbacks(IGoblinMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_GoblinMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GoblinMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IGoblinMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IGoblinMovementActions instance)
        {
            if (m_Wrapper.m_GoblinMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGoblinMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_GoblinMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GoblinMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GoblinMovementActions @GoblinMovement => new GoblinMovementActions(this);
    public interface IGoblinControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnStab(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
        void OnDebug(InputAction.CallbackContext context);
        void OnVacuum(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
    }
    public interface IUI_InteractionActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
    }
    public interface IGoblinMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
